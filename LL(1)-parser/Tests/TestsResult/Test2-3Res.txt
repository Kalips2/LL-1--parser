First_k for no terminals:
S: {ab, eps}
A: {aa, ab, b}

Follow_k for no terminals:
S: {aa, eps}
A: {aa, eps}

Local_k for no terminals:
S: { { aa }, { eps } }
A: { { aa }, { eps } }

Order rules for our grammar:
S -> a b A 		(1)
S -> eps 		(2)
A -> S a a 		(3)
A -> b 		(4)

Table of control for LL(k) k > 1
Combination: a

Combination: aa
T_1: T_2 a a  ; rule - 3
T_2: eps  ; rule - 2
T_3: T_2 a a  ; rule - 3

Combination: ab
T_0: a b T_1  ; rule - 1
T_1: T_2 a a  ; rule - 3
T_2: a b T_3  ; rule - 1
T_3: T_2 a a  ; rule - 3

Combination: b
T_1: b  ; rule - 4

Combination: ba
T_3: b  ; rule - 4

Combination: bb

Combination: eps
T_0: eps  ; rule - 2

LL(2) analyzer started for a b a b a a a
Stack: T_0  Current lexeme: a b
Stack: T_1 b a  Current lexeme: a b
Stack: T_1 b  Current lexeme: b a
Stack: T_1  Current lexeme: a b
Stack: a a T_2  Current lexeme: a b
Stack: a a T_3 b a  Current lexeme: a b
Stack: a a T_3 b  Current lexeme: b a
Stack: a a T_3  Current lexeme: a a
Stack: a a a a T_2  Current lexeme: a a
Stack: a a a a  Current lexeme: a a
Stack: a a a  Current lexeme: a a
Stack: a a  Current lexeme: a
Stack: a  Current lexeme:
Lexeme is empty, but stack doesn't!
Pi chain before error - 1 3 1 3 2

epsilon non-terminals: {S}

k = 2
left-recursive non-terminals: {}